'''
Created on Oct 29, 2014

@author: luchristopher
'''
from demo import *


class DemoOne(Demo):
    '''
    classdocs
    '''

    def __init__(self):
        '''
        Constructor
        '''
        self._the_array = np.zeros((5,3),dtype = np.int64)
        for i in range(5):
            for j in range(3):
                self._the_array[i,j] = i+1+5*j
    
    def __rowGenerationDemo(self):
        return self._the_array[(1,3),:].copy() #copy() was used to make sure the returned array is a new array rather than a view of the original
    
    def __columnGenerationDemo(self):
        return self._the_array[:,1].reshape(5,1).copy() #reshape() was used to maintain the elements as a column
    
    def __areaGenerationDemo(self):
        return self._the_array[1:4,0:3].copy()
    
    def __boundedValueDemo(self):
        return self._the_array[np.logical_and(self._the_array >=3, self._the_array <= 11)]
    
    def demoShow(self):
        print 'The generated array is shown below:'
        self._displayArrayDemo()
        print 'The answer to 1-a is:'
        print self.__rowGenerationDemo()
        print 'The answer to 1-b is:'
        print self.__columnGenerationDemo()
        print 'The answer to 1-c is: (Boundaries are included)'
        print self.__areaGenerationDemo()
        print 'The answer to 1-d is: (Boundary values are included)'
        print self.__boundedValueDemo()
        print '\n'


class DemoTwo(Demo):
    '''
    classdocs
    '''

    def __init__(self):
        '''
        Constructor
        '''
        self._the_array = np.arange(25).reshape(5, 5)   #_the_array here stands for a
    
    def __divideElementwiseDemo(self):
        b = np.array([1., 5, 10, 15, 20])
        return self._the_array/b.reshape(5,1) #reshape the b array to use the broadcast regime on each column
    
    def demoShow(self):
        print 'The result for question 2 is:'
        print self.__divideElementwiseDemo()
        print '\n'        
        

class DemoThree(Demo):
    '''
    classdocs
    '''
    
    def __init__(self):
        self._the_array = np.random.rand(10,3)  #initialized as a random 10*3 array with elements uniformly distributed between 0 and 1
        
    def __pickTheClosestDemo(self):
        selection_array_row = np.arange(10)     #configuring the vertical selection array
        selection_array_column = np.argmin(np.absolute(self._the_array-0.5),axis=1) #horizontal selection array
        return self._the_array[selection_array_row,selection_array_column] #use fancy selection to pick values that are closest to 0.5
    
    def demoShow(self):
        print 'The random array generated by np.random.rand() is:'
        self._displayArrayDemo()
        print 'The values in each row that are closest to 0.5 is:(from row 0 to 9)'
        print self.__pickTheClosestDemo()
        print '\n'
        
class DemoFour(Demo):
    
    
    def __init__(self):
        pass
        